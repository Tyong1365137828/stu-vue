在普通的script标签里,使用如: const a = 20; console.log(a);    ....等一些代码时,可以获取我们想要的结果,因为这种方式是 "同步的" .
但是,如果是一些网络请求的话,这种同步的方式就会造成js代码的阻塞;因此,JS官方在此使用了 "异步编程",这种方式能让用户继续执行响相应的操作,
而网络请求的成功与否处理信息交给回调函数,但是,这出现了一些新的问题,如果回调函数出现嵌套的问题,就会出现 "回调地狱" 回调函数内嵌回调函数,
甚至出现多层内嵌;至此,ES6出现了解决避免出现回调地狱的内部封装类 Promise